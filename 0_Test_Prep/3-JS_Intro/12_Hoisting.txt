Hoisting In Function Declarations vs Function Expressions
So how does this work with function declarations vs function expressions?

    Function declarations are fully defined before the code is run. So in the following example, we can call the sayHi function above the lines that define the sayHi function:

    sayHi("Matt"); // "Hello Matt"

    function sayHi(name){
        return "Hello " + name;
    }
    However, function expressions act differently. In the following example, there is an error because we are trying to invoke a function called sayHi but at that point in the code sayHi is not equal to a function. In fact, sayHi exists in memory but we can not access it and JavaScript will throw an error.

    sayHi("Matt"); // Throws an error!

    let sayHi = function(name){
        return "Hello " + name;
    }
This is why we recommend that for now, you just use function declarations where you do not need to use the let or const keyword.
______________________________________________________
You can read more about hoisting here. https://developer.mozilla.org/en-US/docs/Glossary/Hoisting
