FOR OF = arrays and strings
FOR IN = objects

For...of, a more modern loop
In 2015, JavaScript introduced a simpler kind of loop that allows you to iterate with less code. It's called for...of loop, and it looks like this:
    let names = ["Elie", "Matt", "Tim"];
    for (let name of names) {
        console.log(name);
    }
    This will output:

    // Elie
    // Matt
    // Tim

With a for...of loop, we iterate over an array and assign a variable to each element in the array. You can all this variable whatever you like (in our example we called it name), just be sure to declare it using let.

Let's see another example:
    let numbers = [2,4,6,8];
    for (let num of numbers) {
        console.log(num);
    }
Here we will log 2, 4, 6, and 8.

If you need to access the index of the array, you can do this using a for...of loop, but it's a bit complex. For now, if you need each index, use a regular for or while loop.

______________________________________________________

Strings Revisited
Now that we've learned about arrays, let's briefly return to strings and compare and contrast these two data types. They do have some similarities, but it's important to understand their differences as well.

Looping over strings - FOR OF
!!! ONLY USE FOR OF for Strings and Arrays !!! FOR IN is used only for objects  !!!
Just like we can iterate over arrays (and objects), we can also iterate over strings! Since strings have a length property, we always know at what point to stop looping, just like with arrays. Let's see an example of looping over a string:
    let name = "Elie";

    for(let i=0; i < name.length; i++){
        console.log(name[i]);
    }

    // E
    // l
    // i
    // e

You can also use a for...of to loop over characters in a string!
    let name = "Kayla";

    for (let character of name) {
        console.log(character);
    }

    // K
    // a
    // y
    // l
    // a

______________________________________________________

Using split to turn a string into an array
Many times you will need to manipulate a string and turn it into an array. To split a string into an array you can use the split method and pass in a delimiter value.
    let string = "hello world";
    string.split(""); // ["h", "e", "l", "l", "o", " ", "w", "o", "r", "l", "d"]
    string.split(" ");  // ["hello", "world"]

If you pass a delimiter into the split method, the delimiting values will be removed from the array:
    let dashedString = "lots-of-dashes-here";
    let removedDashes = dashedString.split("-");
    removedDashes; // ["lots", "of", "dashes", "here"]

We can then join the array using the join method to bring it back to a string. You can think of the split as doing the opposite of what join does.
    let dashedString = "lots-of-dashes-here";
    let removedDashes = dashedString.split("-").join(" ");
    removedDashes; // "lots of dashes here"

______________________________________________________ 

Mutability (CAN'T CHANGE STRING BY ACCESSING THE [0])
We've seen how you can update array values by simply accessing an array element and assigning it a new value:
    let arr = ["hi", "bye"];
    arr[0] = "hello";
    arr; // ["hello", "bye"]

You can also access characters in strings using bracket notation:
    let name = "Matt";
    name[0]; // "M"

However, unlike with arrays, you can't reassign the value of a character in a string. If you try, JavaScript will simply ignore you:
    let name = "Matt";
    name[0] = "m";
    name; // "Matt", not "matt"!

______________________________________________________ 

