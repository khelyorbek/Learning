 In JavaScript, you initialize variables using the let keyword. Strictly speaking, using this keyword is not necessary, but in practice it should almost always be there (we'll discuss why a bit later).
    let firstName = "Matt";
    console.log("Hi, " + firstName + "!");

______________________________________________________

The prompt function
When you use the prompt function, a pop-up window will appear on the page and ask the user to fill in a text box. You can then store what the user types into a variable. Try it out with this modification to our example:
    let firstName = prompt("What is your first name?");
    // Now firstName should correspond to whatever the user typed!
    console.log("Hi, " + firstName + "!");
______________________________________________________
Primitive Data Types in JavaScript
JavaScript has 6 primitive data types, but we'll only talk about 5 of them. Here's what they look like:

string - let greeting = "hello";
    let greeting = "Hello Whiskey";
    let greeeting = 'Hello World';

number - let favoriteNum = 33;
    let x = 1 + 3;
    let a = 4.5;
    let b = 5.9;
    let c = Math.sqrt(a * a + b * b);
    let studentTeacherRatio = 4 / 1;

boolean - let isAwesome = true;
    let pizzaIsGood = true;
    let pizzaIsBad = false;

undefined - let foo; or let setToUndefined = undefined;
    let noValue;  // The value here will be undefined
    let favoriteFood = "Candy";
    // Changed your mind
    let favoriteFood = undefined;

null - let empty = null;
    Null is not the same as undefined. It signifies an >>> intentional <<< absence of data.
    let secondEmailAddress = null;

It is important to remember that null and undefined are different types in JavaScript! This can be a confusing feature of JavaScript, even for people who know other programming languages. The distinction can seem somewhat arbitrary when you're first learning the language, but as you get more comfortable the distinction will become clearer. For now, you don't need to worry about it too much; if you're interested, you can read some discussion about the differences here https://stackoverflow.com/questions/5076944/what-is-the-difference-between-null-and-undefined-in-javascript and here https://www.quora.com/What-is-the-rationale-for-JavaScript-supporting-both-null-and-undefined.

______________________________________________________

Figuring out a variable's type in JavaScript
In JavaScript, we have a keyword called typeof that returns the type of the variable. While this seems pretty fool-proof, there are some quirks that we should be aware of. In the Chrome console, let's type out each one of these:

typeof ""; - "string"
typeof 5; - "number"
typeof false; - "boolean"
typeof Symbol(); - "symbol"
typeof undefined; - "undefined"
typeof null; // hmmm, this is not what we expect, it returns "object"!

______________________________________________________
Converting between types

Converting to a string: toString
The toString method will convert any value which is not undefined or null into a string. Here are a couple of examples:
    let num = 5;
    let bool = true;

    num.toString(); // "5";
    bool.toString(); // "true";

Converting to a number
There are several ways you can convert a value to a number. One way is to parse the number, using parseInt or parseFloat: each function will look at a string from left to right and try to make sense of the characters it sees as numbers. Here are some examples:
    parseInt("2"); // 2
    parseFloat("2"); // 2
    parseInt("3.14"); // 3
    parseFloat("3.14"); // 3.14
    parseInt("2.3alkweflakwe"); // 2
    parseFloat("2.3alkweflakwe"); // 2.3
    parseInt("w2.3alkweflakwe"); // NaN (not a number)
    parseFloat("w2.3alkweflakwe"); // NaN (not a number)

Both of these functions parse from left to right. If they see numbers, they'll continue parsing until they find a non-numerical character, and will either return an integer or a float, depending on which function was used. That's why parseInt("2.3alkweflakwe") returns a valid integer, but parseInt("w2.3alkweflakwe") does not.

NaN
If you ever need to check if an expression evaluates to NaN you can use the handy isNaN function which returns true if the expression can not be converted to a number.

    let validConversion = Number("2")
    console.log("Is validConversion NaN?", isNaN(validConversion))

    // Is validConversion NaN? false

    let invalidConversion = Number("hello world")
    console.log("Is invalidConversion NaN?", isNaN(invalidConversion))

    // Is invalidConversion NaN? true

Converting to a boolean: !!
We'll talk about the ! operator on booleans in a later chapter. For now, all you need to know is that !! will convert a value to its boolean equivalent. Here are a couple of examples:
    let greeting = "hi";
    let nothing = 0;

    !!greeting; // true
    !!nothing; // false

A very quick note on var and const
There are two other keywords that we can use to declare variables in JavaScript, var and const. 
    var exists in some older tutorials; it is much more rarely used in modern JavaScript. 
    const is an alternative to let but it does not allow you to redeclare, which makes it useful for variables that you do not want changed.

