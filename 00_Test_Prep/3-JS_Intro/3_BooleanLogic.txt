Difference between == and ===
== allows for type coercion (doesn't count data type. can compare int to a string) of the values, while === does not
    5 == "5"; // true
    5 === "5"; // false
    true == 1; // true
    true === 1; // false
    undefined === null; // false
    undefined == null; // true

We saw before that we can use == or === to compare values. We can also check for inequality, using
    < - less than,
    <= - less than or equal to,
    > - greater than,
    >= - greater than or equal to,
    != - not equal (loose), and
    !== - not equal (strict).

______________________________________________________

False(y) Values
As we've alluded to already, another essential concept to understand in JavaScript is that some values (aside from false) are actually false as well, when they're used in a context where JavaScript expects a boolean value! Even if they do not have a "value" of false, these values will be translated (or "coerced") to false when evaluated in a boolean expression.

In JavaScript there are 6 falsey values:
    0
    ""
    null
    undefined
    false
    NaN (short for not a number)

______________________________________________________

Ternary Operators
Another common pattern you'll see in JavaScript is the use of ternary operators. A ternary operator is another way to write an if / else statement. For example, consider the following code:
    let guess = prompt("Guess what number I'm thinking of!");

    // here's our first ternary
    guess === "7" ? console.log("Correct!") : console.log("Incorrect!");

In general, a ternary operator has the form:
    expression ? pathIfTrue : pathIfFalse

______________________________________________________

Switch statements
Another way to write conditional logic is to use a switch statement. While these are used less frequently, they can be quite useful when there are multiple conditions that can be met. Notice that each case clause needs to end with a break so that we exit the switch statement. Here is an example:

let feeling = prompt("How are you feeling today?").toLowerCase();
// what do you think the .toLowerCase does at the end?

switch(feeling){
    case "happy":
        console.log("Awesome, I'm feeling happy too!");
        break;
    case "sad":
        console.log("That's too bad, I hope you feel better soon.");
        break;
    case "hungry":
        console.log("Me too, let's go eat some pizza!");
        break;
    default:
        console.log("I see. Thanks for sharing!");
}
